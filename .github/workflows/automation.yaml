
name: Test, build, and deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: Run tests 🧪
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      # I used the yarn package manager, so use that to keep consistent with the lock files
      - name: Install dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install # yarn install
      - name: Run linting
        uses: borales/actions-yarn@v4
        with:
          cmd: lint
      - name: Run tests
        uses: borales/actions-yarn@v4
        with:
          cmd: test

  test-e2e:
    name: Run e2e 🧪
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      # I used the yarn package manager, so use that to keep consistent with the lock files
      - name: Install dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install # yarn install
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          start: npm run test-server
          browser: chrome
          headless: true
          record: true

  build:
    name: Checks project builds 🔨
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      # I used the yarn package manager, so use that to keep consistent with the lock files
      - name: Install dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install # yarn install
      - name: Run linting
        uses: borales/actions-yarn@v4
        with:
          cmd: build
  
  coverage:
    name: Generate coverage 🧐
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      # I used the yarn package manager, so use that to keep consistent with the lock files
      - name: Install dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install # yarn install
      - name: Run coverage
        uses: borales/actions-yarn@v4
        with:
          cmd: coverage
      - name: Upload report artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage
  
  deploy-coverage:
    name: Deploy coverage to pages 🚀
    runs-on: ubuntu-latest
    needs: coverage
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    environment:
      name: coverage-report
      url: ${{ steps.deployment.outputs.page_url }}
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
      - name: Upload files to github pages
        uses: actions/upload-pages-artifact@v1
        with:
          path: .
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
      - name: Tidy up artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: coverage-report

  build-container:
    name: Build Container 📦
    needs: [test, build, test-e2e]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Git config
        run: |
          git config --global user.email "michael.bruty@students.plymouth.ac.uk"
          git config --global user.name "mbruty"
      - name: Bump version number
        run: |
          npm run patch
      - name: Lowercase REPO
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
      - name: Setup Cloud cli
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Authorize Docker push
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev
      - name: Build and push Docker image
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.REPO }}/trial-by-fire:latest
            ghcr.io/${{ env.REPO }}/trial-by-fire:${{  github.sha }}
            europe-west1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/trial-by-fire/next:${{  github.sha }}

  deploy:
    name: Deploy to cloud run
    needs: build-container
    environment:
      name: Production
      url: ${{ steps.deploy.outputs.url }}
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Setup Cloud cli
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{ secrets.PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
    - name: Deploy 🚀
      id: 'deploy'
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: next-deployment
        image: europe-west1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/trial-by-fire/next:${{  github.sha }}
        region: europe-west1
